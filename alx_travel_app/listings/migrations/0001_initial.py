# Generated by Django 5.2.3 on 2025-08-15 19:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='User ID')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('listing_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Listing ID')),
                ('name', models.CharField(max_length=100, verbose_name='Listing Name')),
                ('description', models.TextField(verbose_name='Description of Property')),
                ('price_per_night', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Price of Listing per Night')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Listing was added')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date Listing was updated')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Booking ID')),
                ('start_date', models.DateField(verbose_name='Start Date of Booking')),
                ('end_date', models.DateField(verbose_name='End Date of Booking')),
                ('total_price', models.IntegerField(verbose_name='Total Price of Entire Stay in pesewas (*100)')),
                ('status', models.CharField(choices=[('PND', 'Pending'), ('CFD', 'Confirmed'), ('CNC', 'Cancelled')], default='PND', max_length=3, verbose_name='Status of Booking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='bookings', to='listings.listing')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Payment ID')),
                ('payment_status', models.CharField(choices=[('PND', 'PAYMENT PENDING'), ('PCS', 'PROCESSING PAYMENT'), ('SCS', 'PAYMENT SUCCESSFUL'), ('CND', 'PAYMENT CANCELLED'), ('FLD', 'PAYMENT FAILED'), ('RFD', 'PAYMENT REFUNDED')], default='PND', max_length=3)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(choices=[('USD', 'UNITED STATES DOLLARS'), ('ETB', 'ETHIOPIAN BIRR')], default='ETB', max_length=3)),
                ('transaction_id', models.CharField(db_index=True, max_length=255, null=True, unique=True, verbose_name='ID returned by CHAPPA_PAY')),
                ('checkout_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='CheckOut URL from CHAPPA')),
                ('raw_request', models.JSONField(blank=True, null=True, verbose_name='Outbound Payment Request Payload')),
                ('raw_response', models.JSONField(blank=True, null=True, verbose_name='Raw Response from Chappa')),
                ('merchant_reference', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True)),
                ('webhook_event_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('booking_reference', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='booking_payment', to='listings.booking')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Review ID')),
                ('rating', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='listings.listing')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
